// ... existing imports and code ...

const PollPage: React.FC = () => {
  // ... existing state and effects ...

  return (
    <main className="min-h-screen bg-poll-dark text-poll-grey-100">
      {/* Logo and Header Section */}
      <div className="w-full text-center pt-12 pb-8">
        <h1 className="text-4xl font-bold mb-2">
          Poll<span className="text-[#14b8a6]">.it</span>
        </h1>
        <p className="text-poll-grey-400">
          Create engaging polls and get real-time insights from your community
        </p>
      </div>

      <div className="container max-w-6xl mx-auto flex flex-col lg:flex-row gap-8 px-4 pb-8">
        {/* Main Poll Section */}
        <div className="w-full lg:w-2/3">
          <div className="bg-poll-grey-800/50 border border-poll-grey-700 rounded-lg p-6">
            {loading ? (
              <div className="flex items-center justify-center h-64">
                <ArrowPathIcon className="w-8 h-8 text-poll-grey-400 animate-spin" />
              </div>
            ) : error ? (
              <div className="text-red-500 text-center py-8">{error}</div>
            ) : (
              <>
                <div className="flex items-center justify-between mb-6">
                  <div className="flex-1">
                    <h2 className="text-2xl font-semibold text-white mb-2">{poll?.question}</h2>
                    <div className="flex items-center gap-4">
                      <span className="inline-flex items-center rounded-full bg-[#14b8a6]/10 px-2.5 py-0.5 text-xs font-medium text-[#14b8a6]">
                        LIVE
                      </span>
                      <span className="text-sm text-gray-400">
                        {votes.length} votes
                      </span>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    <button
                      onClick={() => setShowBar(!showBar)}
                      className="p-2 text-poll-grey-400 hover:text-white transition-colors"
                      title={showBar ? "Show pie chart" : "Show bar chart"}
                    >
                      {showBar ? (
                        <ChartPieIcon className="w-5 h-5" />
                      ) : (
                        <ChartBarIcon className="w-5 h-5" />
                      )}
                    </button>
                  </div>
                </div>

                {/* Voting Form */}
                {!hasVoted && (
                  <form onSubmit={handleVote} className="mb-8">
                    <div className="space-y-3">
                      {choices.map((choice) => (
                        <div
                          key={choice.id}
                          className={`p-4 rounded-lg border transition-all cursor-pointer
                            ${selected.includes(choice.id)
                              ? "bg-[#14b8a6]/10 border-[#14b8a6] text-white"
                              : "bg-[#1e2736] border-[#2f3a4e] hover:border-[#14b8a6]/50 hover:bg-[#1e2736]/80"
                            }`}
                          onClick={() => {
                            if (poll?.max_choices === 1) {
                              setSelected([choice.id]);
                            } else {
                              setSelected(prev =>
                                prev.includes(choice.id)
                                  ? prev.filter(id => id !== choice.id)
                                  : [...prev, choice.id]
                              );
                            }
                          }}
                        >
                          <div className="flex items-center justify-between">
                            <span className="text-lg">{choice.text}</span>
                            <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center
                              ${selected.includes(choice.id)
                                ? "border-[#14b8a6] bg-[#14b8a6]"
                                : "border-[#2f3a4e]"
                              }`}
                            >
                              {selected.includes(choice.id) && (
                                <svg className="w-4 h-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                </svg>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                    <button
                      type="submit"
                      disabled={selected.length === 0}
                      className={`w-full mt-6 px-4 py-3 rounded-lg font-medium transition-all
                        ${selected.length === 0
                          ? "bg-[#14b8a6]/20 text-[#14b8a6]/50 cursor-not-allowed"
                          : "bg-[#14b8a6] text-white hover:bg-[#14b8a6]/90"
                        }`}
                    >
                      Vote Now
                    </button>
                  </form>
                )}

                {/* Results Chart */}
                {showBar ? (
                  <BarChart data={chartData} className="mt-6" />
                ) : (
                  <PieChart
                    data={{
                      labels: chartData.labels,
                      values: chartData.datasets[0].data,
                    }}
                    className="mt-6"
                  />
                )}
              </>
            )}
          </div>
        </div>

        {/* Chat Sidebar */}
        <div className="w-full lg:w-1/3">
          <ChatSidebar
            messages={chatMessages}
            users={chatUsers}
            onSendMessage={handleSendChat}
            messageInputValue={chatInput}
            onMessageInputChange={(e) => setChatInput(e.target.value)}
            onToggleMinimize={() => setChatSidebarMinimized(!chatSidebarMinimized)}
            isMinimized={chatSidebarMinimized}
            showEmoji={showEmoji}
            onToggleEmoji={() => setShowEmoji(!showEmoji)}
            onEmojiSelect={handleEmojiSelect}
            messageInputRef={chatInputRef}
          />
        </div>
      </div>
    </main>
  );
};

export default PollPage;
