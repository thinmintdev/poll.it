'use client'

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import Link from 'next/link'
import { Poll, PollResults } from '@/types/poll'
import PollChart from '@/components/PollChart'
import ShareModal from '@/components/ShareModal'
import { io } from 'socket.io-client'

export default function PollPage() {
  const params = useParams()
  const pollId = params?.id as string
  
  const [poll, setPoll] = useState<Poll | null>(null)
  const [results, setResults] = useState<PollResults | null>(null)
  const [selectedOption, setSelectedOption] = useState<number | null>(null)
  const [hasVoted, setHasVoted] = useState(false)
  const [loading, setLoading] = useState(true)
  const [voting, setVoting] = useState(false)
  const [error, setError] = useState('')
  const [chartType, setChartType] = useState<'doughnut' | 'bar'>('doughnut')
  const [showShareModal, setShowShareModal] = useState(false)

  // Initialize socket connection
  useEffect(() => {
    if (!pollId) return
    
    const socketInstance = io({
      path: '/api/socket'
    })

    socketInstance.on('connect', () => {
      console.log('Connected to socket')
      socketInstance.emit('join-poll', pollId)
    })

    socketInstance.on('poll-updated', (data: PollResults) => {
      console.log('Poll updated:', data)
      setResults(data)
    })

    return () => {
      socketInstance.emit('leave-poll', pollId)
      socketInstance.disconnect()
    }
  }, [pollId])

  // Fetch poll data
  useEffect(() => {
    if (!pollId) return
    
    const fetchPoll = async () => {
      try {
        const response = await fetch(`/api/polls/${pollId}`)
        if (!response.ok) {
          throw new Error('Poll not found')
        }
        const pollData = await response.json()
        setPoll(pollData)
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load poll')
      } finally {
        setLoading(false)
      }
    }

    fetchPoll()
  }, [pollId])

  // Fetch results
  useEffect(() => {
    if (!poll || !pollId) return
    
    const fetchResults = async () => {
      try {
        const response = await fetch(`/api/polls/${pollId}/results`)
        if (response.ok) {
          const resultsData = await response.json()
          setResults(resultsData)
        }
      } catch (err) {
        console.error('Failed to load results:', err)
      }
    }

    fetchResults()
    // Refresh results every 5 seconds
    const interval = setInterval(fetchResults, 5000)
    return () => clearInterval(interval)
  }, [poll, pollId])

  const handleVote = async () => {
    if (selectedOption === null || voting || !pollId) return

    setVoting(true)
    setError('')

    try {
      const response = await fetch(`/api/polls/${pollId}/vote`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ optionIndex: selectedOption }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        if (response.status === 409) {
          setHasVoted(true)
          setError('You have already voted on this poll')
        } else {
          throw new Error(errorData.error || 'Failed to vote')
        }
      } else {
        setHasVoted(true)
        // Immediately fetch updated results
        const resultsResponse = await fetch(`/api/polls/${pollId}/results`)
        if (resultsResponse.ok) {
          const updatedResults = await resultsResponse.json()
          setResults(updatedResults)
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Something went wrong')
    } finally {
      setVoting(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-app-primary flex items-center justify-center">
        <div className="text-center">
          <div className="inline-flex items-center space-x-2 text-app-secondary">
            <svg className="animate-spin h-8 w-8" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span className="text-lg">Loading poll...</span>
          </div>
        </div>
      </div>
    )
  }

  if (error && !poll) {
    return (
      <div className="min-h-screen bg-app-primary flex items-center justify-center">
        <div className="text-center bg-app-secondary rounded-lg shadow-lg p-8 max-w-md">
          <div className="text-app-accent mb-4">
            <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-app-primary mb-4">Poll Not Found</h2>
          <p className="text-app-secondary mb-6">
            {error || "The poll you're looking for doesn't exist or has been removed."}
          </p>
          <Link
            href="/"
            className="bg-app-accent hover:opacity-90 text-app-primary font-semibold py-3 px-6 rounded-lg text-lg transition duration-200 inline-flex items-center space-x-2"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            <span>Go Home</span>
          </Link>
        </div>
      </div>
    )
  }

  const currentUrl = typeof window !== 'undefined' ? window.location.href : ''

  return (
    <div className="min-h-screen bg-app-primary">
      <div className="container mx-auto px-4 py-8">
        {/* Header Section */}
        <div className="text-center mb-8">
          <h1 className="text-3xl md:text-4xl font-bold text-app-primary mb-4">
            {poll?.question}
          </h1>
          <div className="flex items-center justify-center space-x-6 text-app-secondary">
            <div className="flex items-center space-x-2">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
              <span>{results?.totalVotes || 0} vote{(results?.totalVotes || 0) !== 1 ? 's' : ''}</span>
            </div>
            <div className="flex items-center space-x-1">
              <div className="w-2 h-2 bg-app-accent rounded-full animate-pulse"></div>
              <span>Live Results</span>
            </div>
          </div>
        </div>


        {/* Two Column Layout */}
        <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Left Column: Voting Phase or Results */}
          <div className="bg-app-secondary rounded-lg border border-app p-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-app-primary text-lg font-medium">{poll?.question}</h2>
                <p className="text-app-muted text-sm">by a guest â€¢ {hasVoted ? 'just now' : '4 minutes ago'}</p>
              </div>
              <button className="text-app-muted hover:text-app-secondary">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                </svg>
              </button>
            </div>
            
            {!hasVoted ? (
              <div>
                <p className="text-app-secondary text-sm mb-4">Make a choice:</p>
                <div className="space-y-3 mb-6">
                  {poll?.options.map((option, index) => (
                    <label
                      key={index}
                      className={`flex items-center space-x-3 cursor-pointer p-3 rounded-lg transition-colors hover:bg-app-tertiary ${selectedOption === index ? 'bg-app-tertiary' : ''}`}
                    >
                      <input
                        type="radio"
                        name="poll-option"
                        value={index}
                        checked={selectedOption === index}
                        onChange={() => setSelectedOption(index)}
                        className="w-4 h-4 text-app-accent bg-app-tertiary border-app focus:ring-app-accent focus:ring-2"
                      />
                      <span className="text-app-primary">{option}</span>
                    </label>
                  ))}
                </div>
                
                <div className="flex items-center gap-4 mb-4">
                  <button
                    onClick={handleVote}
                    disabled={selectedOption === null || voting}
                    className="bg-app-accent hover:opacity-90 disabled:bg-app-surface disabled:opacity-50 text-app-primary px-6 py-2 rounded font-medium transition-colors flex items-center gap-2"
                  >
                    {voting ? 'Voting...' : 'Vote'}
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </button>
                  
                  <button 
                    className="btn-clear hover:shadow-lg hover:shadow-cotton-pink/20" 
                    onClick={() => setHasVoted(true)}
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                    Show results
                  </button>
                  
                  <button
                    onClick={() => setShowShareModal(true)}
                    className="btn-clear hover:shadow-lg hover:shadow-cotton-blue/20"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                    </svg>
                    Share
                  </button>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                    </svg>
                    Share
                  </button>
                </div>
                
                <div className="flex items-center gap-2 text-app-muted text-sm">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  One vote per IP-Address allowed.
                </div>
                
                {error && (
                  <div className="mt-4 bg-red-900/50 border border-red-700 rounded p-3">
                    <p className="text-red-300 text-sm">{error}</p>
                  </div>
                )}
              </div>
            ) : (
              <div>
                <div className="space-y-3 mb-6">
                  {poll?.options.map((option, index) => {
                    const result = results?.results[index]
                    const percent = result?.percentage || 0
                    const isSelected = selectedOption === index
                    return (
                      <div key={index} className={`relative p-3 rounded-lg transition-colors ${isSelected ? 'bg-app-tertiary' : ''}`}>
                        <div className="flex items-center justify-between z-10 relative">
                          <div className="flex items-center space-x-3">
                            <div className={`w-4 h-4 rounded-full border-2 ${
                              isSelected ? 'bg-app-accent border-app-accent' : 'border-app'
                            }`}></div>
                            <span className="text-app-primary">{option}</span>
                          </div>
                          <span className="text-app-secondary">{percent}% ({result?.votes || 0})</span>
                        </div>
                        <div
                          className="absolute top-0 left-0 h-full bg-app-accent/20 rounded-lg"
                          style={{ width: `${percent}%` }}
                        />
                      </div>
                    )
                  })}
                </div>

                <div className="flex justify-center gap-2 mb-6">
                  {/* Chart type buttons removed */}
                </div>
                
                <p className="text-app-muted text-sm mb-4">Total votes: {results?.totalVotes || 0}</p>
                
                <div className="flex items-center gap-4 mb-4">
                  <button
                    onClick={() => { /* handle refresh */ }}
                    className="bg-app-accent hover:opacity-90 text-app-primary px-6 py-2 rounded font-medium transition-colors flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Refresh results
                  </button>
                  
                  <button 
                    className="btn-clear hover:shadow-lg hover:shadow-cotton-purple/20" 
                    onClick={() => setHasVoted(false)}
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    Back to poll
                  </button>
                  
                  <button
                    onClick={() => setShowShareModal(true)}
                    className="btn-clear hover:shadow-lg hover:shadow-cotton-blue/20"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                    </svg>
                    Share
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Right Column: Chart and Feed */}
          <div className="space-y-6">
            {/* Chart Panel */}
            <div className="bg-app-secondary rounded-lg border border-app p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <svg className="w-5 h-5 text-app-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                  <span className="text-app-primary font-medium">Chart</span>
                </div>
                <div className="flex justify-center gap-2">
                  <button
                    onClick={() => setChartType('doughnut')}
                    className={`px-3 py-1 rounded text-sm ${
                      chartType === 'doughnut' ? 'bg-app-accent text-app-primary' : 'bg-app-tertiary text-app-secondary hover:bg-app-surface'
                    }`}
                  >
                    Pie
                  </button>
                  <button
                    onClick={() => setChartType('bar')}
                    className={`px-3 py-1 rounded text-sm ${
                      chartType === 'bar' ? 'bg-app-accent text-app-primary' : 'bg-app-tertiary text-app-secondary hover:bg-app-surface'
                    }`}
                  >
                    Bar
                  </button>
                </div>
              </div>
              <div className="h-[320px]">
                <PollChart
                  results={poll?.options.map((option, index) => ({
                    option,
                    votes: results?.results[index]?.votes || 0,
                    percentage: results?.results[index]?.percentage || 0
                  })) || []}
                  type={chartType}
                />
              </div>
            </div>
            
            {/* Comments/Feed Panel */}
            <div className="bg-app-secondary rounded-lg border border-app p-6">
              <div className="flex items-center gap-2 mb-4">
                <svg className="w-5 h-5 text-app-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
                <span className="text-app-primary font-medium">Feed</span>
              </div>
              <p className="text-app-muted text-sm">Comments are disabled.</p>
            </div>
            
            <div className="text-center">
              <p className="text-app-muted text-xs">This content is neither created nor endorsed by POLL.IT.</p>
              <button className="text-app-accent hover:opacity-90 text-xs">Report content</button>
            </div>
          </div>
        </div>
        
        

        {/* Share Modal */}
        <ShareModal 
          isOpen={showShareModal}
          onClose={() => setShowShareModal(false)}
          pollUrl={currentUrl}
          pollTitle={poll?.question || 'Poll'}
        />
      </div>
    </div>
  )
}
